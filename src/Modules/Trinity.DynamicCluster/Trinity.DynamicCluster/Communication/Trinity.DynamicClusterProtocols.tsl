enum Errno
{
	E_OK,
	E_FAIL,
}

struct ChunkInformation
{
	long lowKey;
	long highKey;
	Guid id;
}

// identifies a replica
struct StorageInformation
{
	int partition;
	Guid id;// the id of the replica
}

struct RawCell
{
	long id;
	ushort cell_type;
	List<byte> content;
}

struct BatchCells
{
	Guid task_id;
	List<RawCell> cells;
}

struct ReplicationTaskInformation
{
	Guid task_id;
	StorageInformation to;
	List<ChunkInformation> range;
}

struct ShrinkChunkInformation
{
	ChunkInformation from;
	ChunkInformation to;
}

struct ShrinkDataTaskInformation
{
	Guid task_id;
	List<ChunkInformation> remove_target;
}

struct ErrnoResponse
{
	Errno errno;
}

struct ThrottleResponse
{
	bool throttle; // when true, sender should block until all active batches are saved successfully.
}

struct PersistedSlice
{
	Guid version;
	long lowkey;
	long highkey;
}

protocol NotifyRemoteStorageOnLeaving
{
    Type: Asyn;
    Request: StorageInformation;
}

protocol BatchSaveCells
{
	Type: Asyn;
	Request: BatchCells;
	Response: ThrottleResponse;
}

// sent from master to a worker
protocol Replication
{
	Type: Asyn;
	Request: ReplicationTaskInformation;
	Response: ErrnoResponse;
}

// sent from master to a worker
protocol ShrinkData
{
	Type: Asyn;
	Request: ShrinkDataTaskInformation;
	Response: ErrnoResponse;
}

protocol PersistedDownload
{
	Type: Asyn;
	Request: PersistedSlice;
	Response: ErrnoResponse;
}

protocol PersistedUpload
{
	Type: Asyn;
	Request: PersistedSlice;
	Response: ErrnoResponse;
}

module DynamicCluster
{
	protocol NotifyRemoteStorageOnLeaving;
	protocol BatchSaveCells;
	protocol Replication;
	protocol ShrinkData;
	protocol PersistedDownload;
	protocol PersistedUpload;
}
